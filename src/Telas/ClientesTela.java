/*
 * Tela usada para o crud dos clientes
 */
package Telas;

import DAO.Conexao;
import Modelo.Usuario;
import Validacao.Validador;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.ResolverStyle;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Dimpeny
 */
public class ClientesTela extends javax.swing.JFrame {

    Usuario usuario;

    /**
     * Creates new form ClientesTela
     *
     * @param usuario Usuário inserido na tela de login
     */
    public ClientesTela(Usuario usuario) {
        initComponents();
        this.usuario = usuario;
        this.setTitle("Clientes | Usuário: " + usuario.getNome() + "| ID: " + usuario.getId());
        carregarTabela();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField4 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        campoCpf = new javax.swing.JTextField();
        try{
            javax.swing.text.MaskFormatter cpf = new javax.swing.text.MaskFormatter("###.###.###-##");
            campoCpf = new javax.swing.JFormattedTextField(cpf);
        } catch (Exception e) {
            e.printStackTrace();
        }
        campoNome = new javax.swing.JTextField();
        campoNascimento = new javax.swing.JTextField();
        try{
            javax.swing.text.MaskFormatter data = new javax.swing.text.MaskFormatter("##/##/####");
            campoNascimento = new javax.swing.JFormattedTextField(data);
        } catch (Exception e) {
            e.printStackTrace();
        }
        botaoRegistrar = new javax.swing.JButton();
        botaoEditar = new javax.swing.JButton();
        botaoExcluir = new javax.swing.JButton();
        botaoLimpar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaClientes = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuAgenda = new javax.swing.JMenu();
        menuClientes = new javax.swing.JMenu();

        jTextField4.setText("jTextField4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("CPF");

        jLabel2.setText("Nome");

        jLabel3.setText("Nascimento");

        campoCpf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoCpfActionPerformed(evt);
            }
        });

        campoNascimento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoNascimentoActionPerformed(evt);
            }
        });

        botaoRegistrar.setText("Registrar");
        botaoRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoRegistrarActionPerformed(evt);
            }
        });

        botaoEditar.setText("Editar");
        botaoEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoEditarActionPerformed(evt);
            }
        });

        botaoExcluir.setText("Excluir");
        botaoExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoExcluirActionPerformed(evt);
            }
        });

        botaoLimpar.setText("Limpar");
        botaoLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoLimparActionPerformed(evt);
            }
        });

        tabelaClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CPF", "Nome", "Data de nascimento"
            }
        ));
        tabelaClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaClientesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaClientes);

        menuAgenda.setText("Agenda");
        menuAgenda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuAgendaMouseClicked(evt);
            }
        });
        jMenuBar1.add(menuAgenda);

        menuClientes.setText("Clientes");
        menuClientes.setToolTipText("Tela atual");
        menuClientes.setEnabled(false);
        menuClientes.setFocusable(false);
        jMenuBar1.add(menuClientes);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(campoNome, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(campoNascimento, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(campoCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(botaoLimpar)))
                                .addGap(0, 30, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(botaoRegistrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botaoEditar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botaoExcluir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(campoCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(botaoRegistrar)
                        .addComponent(botaoLimpar)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(campoNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoEditar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(campoNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botaoExcluir))
                .addGap(35, 35, 35)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void campoNascimentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoNascimentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoNascimentoActionPerformed

    private void campoCpfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoCpfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoCpfActionPerformed

    /**
     * Botão que limpa os campos para inserir um novo usuário
     *
     * @param evt
     */
    private void botaoLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoLimparActionPerformed
        limparCampos();
        carregarTabela();
    }//GEN-LAST:event_botaoLimparActionPerformed

    /**
     * Botão que adiciona um cliente
     *
     * @param evt
     */
    private void botaoRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoRegistrarActionPerformed
        if (camposPreenchidos() && dataValida(campoNascimento.getText())) {
            inserirCliente();
            limparCampos();
        } else {
            if (campoCpf.getText().equals("   .   .   -  ")) {
                JOptionPane.showMessageDialog(this, "Por favor informe o CPF", "Atenção", JOptionPane.WARNING_MESSAGE);
            } else if (campoNome.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Por favor informe o nome", "Atenção", JOptionPane.WARNING_MESSAGE);
            } else if (campoNascimento.getText().equals("  /  /    ")) {
                JOptionPane.showMessageDialog(this, "Por favor preencha a Data de nascimento", "Atenção", JOptionPane.WARNING_MESSAGE);
            }
        }
        carregarTabela();
    }//GEN-LAST:event_botaoRegistrarActionPerformed

    /**
     * Botão que efetua a edição de um cliente
     *
     * @param evt
     */
    private void botaoEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoEditarActionPerformed
        if (camposPreenchidos()) {
            editarCliente();
            limparCampos();
        }
        carregarTabela();
    }//GEN-LAST:event_botaoEditarActionPerformed

    /**
     * Botão que efetua a exclusão de um cliente
     *
     * @param evt
     */
    private void botaoExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoExcluirActionPerformed
        if (Validador.cpfValido(campoCpf.getText()) && JOptionPane.showConfirmDialog(null, "Você tem certeza?", "Atenção",
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            excluirCliente();
        }
        carregarTabela();
    }//GEN-LAST:event_botaoExcluirActionPerformed

    /**
     * Abre a tela de agenda e fecha a tela de clientes se todos os campos
     * estiverem vazios, senão avisa o usuário que ainda há campos preenchidos
     *
     * @param evt
     */
    private void menuAgendaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuAgendaMouseClicked
        if (!camposPreenchidos()) {
            new AgendaTela(usuario).setVisible(true);
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Há campos ainda preenchidos.", "Atenção", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_menuAgendaMouseClicked

    /**
     * Carrega os dados do cliente clicado na tabela para os campos
     *
     * @param evt
     */
    private void tabelaClientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaClientesMouseClicked
        carregarDados();
    }//GEN-LAST:event_tabelaClientesMouseClicked


    /**
     * Valida se o campo nome contém um nome valido
     *
     * @return true se o nome não conter números. Senão retorna false.
     */
    private boolean nomeValido() {
        String nome = campoNome.getText();
        if (nome.isEmpty()) {
            JOptionPane.showMessageDialog(this, "O nome está vazio.", "Atenção", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        for (int i = 0; i < nome.length(); i++) {
            char cha = nome.charAt(i);
            switch (cha) {
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                    JOptionPane.showMessageDialog(this, "O nome '" + nome + "' contém um ou mais números.", "Atenção", JOptionPane.WARNING_MESSAGE);
                    return false;
            }
        }
        return true;
    }

    /**
     * Método chamado pelo botão excluir para excluir um cliente no banco
     */
    private void excluirCliente() {
        Connection c = Conexao.conectarBD();
        String sql = "DELETE FROM cliente WHERE cpf = ?";
        if (c != null) {
            try {

                try (PreparedStatement ps = c.prepareStatement(sql)) {
                    ps.setString(1, campoCpf.getText());

                    ps.executeUpdate();
                    JOptionPane.showMessageDialog(this, "Cliente excluido", "Info", JOptionPane.INFORMATION_MESSAGE);
                }
                c.close();
            } catch (HeadlessException | SQLException ex) {
                if (ex.getMessage().contains("foreign key constraint")) {
                    JOptionPane.showMessageDialog(this, "Atenção: Cliente ainda tem vacinações agendadas.", "Atenção!", JOptionPane.WARNING_MESSAGE);

                } else {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Erro ao conectar na base.", "Erro", JOptionPane.ERROR_MESSAGE);
        }

    }

    /**
     * Método chamado pelo botão editar para editar um cliente no banco
     */
    private void editarCliente() {
        if (dataValida(campoNascimento.getText()) && Validador.cpfValido(campoCpf.getText()) && nomeValido()) {
            Connection c = Conexao.conectarBD();
            String sql = "UPDATE cliente SET nome = ?, data_nascimento = ? WHERE cpf = ?";
            if (c != null) {
                try {
                    try (PreparedStatement ps = c.prepareStatement(sql)) {
                        ps.setString(1, campoNome.getText());
                        ps.setString(2, campoNascimento.getText());
                        ps.setString(3, campoCpf.getText());

                        ps.executeUpdate();
                        JOptionPane.showMessageDialog(this, "Cliente editado", "Info", JOptionPane.INFORMATION_MESSAGE);
                    }
                    c.close();
                } catch (HeadlessException | SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao conectar na base.", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * Método chamado pelo botão registrar para registrar um cliente no banco.
     */
    private void inserirCliente() {
        if (dataValida(campoNascimento.getText()) && Validador.cpfValido(campoCpf.getText()) && nomeValido()) {
            Connection c = Conexao.conectarBD();
            String sql = "INSERT INTO cliente (cpf,nome,data_nascimento) VALUES (?,?,?)";
            if (c != null) {
                try {
                    try (PreparedStatement ps = c.prepareStatement(sql)) {
                        ps.setString(1, campoCpf.getText());
                        ps.setString(2, campoNome.getText());
                        ps.setString(3, campoNascimento.getText());
                        ps.executeUpdate();
                    }
                    c.close();
                    JOptionPane.showMessageDialog(this, "Cliente registrado", "Info", JOptionPane.INFORMATION_MESSAGE);
                } catch (HeadlessException | SQLException ex) {
                    if (ex.getMessage().contains("Duplicate entry")) {
                        JOptionPane.showMessageDialog(this, "Cliente de cpf '" + campoCpf.getText() + "' já cadastrado(a)!", "Atenção", JOptionPane.WARNING_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, ex.getMessage());
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao conectar na base.", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }else if(!Validador.cpfValido(campoCpf.getText())){
                                JOptionPane.showMessageDialog(this, "CPF não é valido!", "Info", JOptionPane.INFORMATION_MESSAGE);

        }
    }

    /**
     * Método chamado para carregar as informações do cliente nos campos.
     */
    private void carregarDados() {
        int linha = tabelaClientes.getSelectedRow();

        campoCpf.setText(tabelaClientes.getValueAt(linha, 0).toString());
        campoCpf.setEditable(false);

        campoNome.setText(tabelaClientes.getValueAt(linha, 1).toString());

        campoNascimento.setText(tabelaClientes.getValueAt(linha, 2).toString());
    }

    /**
     * Método usado para preencher a tabela de clientes.
     */
    private void carregarTabela() {
        Connection c = Conexao.conectarBD();
        String sql = "SELECT cpf, nome, data_nascimento FROM cliente ORDER BY nome";
        if (c != null) {
            try {
                try (PreparedStatement ps = c.prepareStatement(sql)) {
                    ResultSet rs = ps.executeQuery();
                    DefaultTableModel model = (DefaultTableModel) tabelaClientes.getModel();
                    model.setNumRows(0);
                    
                    while (rs.next()) {
                        model.addRow(new Object[]{
                            rs.getString("cpf"),
                            rs.getString("nome"),
                            rs.getString("data_nascimento")
                        });
                    }
                }
                c.close();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Erro ao conectar na base.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Limpa os campos e desbloqueia o campo CPF para inserir novos clientes.
     */
    private void limparCampos() {
        campoCpf.setEditable(true);
        campoCpf.setText("");
        campoNascimento.setText("");
        campoNome.setText("");
    }

    /**
     * Valida se os campos estão preenchidos.
     *
     * @return true se todos os campos estiverem preenchidos. Se algum campo estiver vazio retorna false.
     */
    private boolean camposPreenchidos() {
        return !(campoCpf.getText().equals("   .   .   -  ") || campoNome.getText().equals("") || campoNascimento.getText().equals("  /  /    "));
    }

    /**
     * Valida se a data informada é valida para prevenir inserir datas como
     * 32/13/2021 por exemplo.
     *
     * @param nascimento data de nascimento informada.
     * @return true se a data for valida, senão retorna false.
     */
    public boolean dataValida(String nascimento) {
        try {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/uuuu").withResolverStyle(ResolverStyle.STRICT);
            LocalDate d = LocalDate.parse(nascimento, formatter);
            System.out.println("Data/Hora valida: " + nascimento);
            return true;
        } catch (Exception e) {
            System.out.println(e.getMessage());
            System.out.println("Data/Hora invalida: " + nascimento);
            JOptionPane.showMessageDialog(this, "Data '" + nascimento + "' não é valida.", "Atenção", JOptionPane.WARNING_MESSAGE);
            return false;
        }
    }

    public static void main(String[] args) {
        Usuario usuario = new Usuario(0, "EXAMPLE USER");
        java.awt.EventQueue.invokeLater(() -> {
            new ClientesTela(usuario).setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoEditar;
    private javax.swing.JButton botaoExcluir;
    private javax.swing.JButton botaoLimpar;
    private javax.swing.JButton botaoRegistrar;
    private javax.swing.JTextField campoCpf;
    private javax.swing.JTextField campoNascimento;
    private javax.swing.JTextField campoNome;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JMenu menuAgenda;
    private javax.swing.JMenu menuClientes;
    private javax.swing.JTable tabelaClientes;
    // End of variables declaration//GEN-END:variables
}
